#lang racket

(require dyoo-while-loop)


(define (get-file user_input)
  (define in (open-input-file user_input))
  (string-split(file->string in) " ")
  ) 

(define (display-file user_input)
  (for ([line (file->lines user_input)])
    ;run func to get tokens
  (string-split line)
  (displayln line)))


(define (string-numeric? s)
  ;e, f, d can be used as exponents in numbers 
(cond [(string-contains? s "e")
    #f]
    [(string-contains? s "f")
    #f]
    [(string-contains? s "d")
    #f]
    [else (number? (string->number s 10))]
    ))

(define (string-alpha-or-num? s start result)
  (if (not (non-empty-string? s))
    (begin (printf "boo returning ~a; result: ~a \n" s result) result)
    (begin 
        (let ([current (substring s start (+ start 1))])
      (if (or (char-alphabetic? (first(string->list current))) (char-numeric? (first(string->list current))))
      (begin
          (string-alpha-or-num? (substring s (+ start 1)) start (string-append current result)))
          (begin 
            (printf "bad char - returning ~a; \n" result )
            result))))))

(define (reverse-string s)
  (list->string (reverse (string->list s))))

(define (string-id? s)
  (cond [(char-alphabetic?(string-ref s 0))
         (begin
           (let([result (reverse-string(string-alpha-or-num? s 0 ""))])
             ;need to reverse string 
             (cond [(string=? "read" result) ;make lowercase? eqv?
                    "read"]
                   [(string=? "write" result) ;make lowercase? eqv?
                    "write"]
                   [else result])))
           ]))

(define (get-num s result)
  (when (non-empty-string? s)
  (let ([a (string-ref s 0)])
    (cond [(char-numeric? a)
           (get-num (substring s 1) (string-append (substring s 0 1) result))]
          [(member a '(#\( #\) #\+ #\- #\* #\/))
           result]
          [(char-alphabetic? a)
           (]
          ))))
           

(define (get-token-list input_list)
  ;(define item (first input_list))
  (for/list ([item (in-list input_list)])
    (define a (string-ref item 0))
    (define b (string-ref item 1))
    (printf "item ~a a ~a b ~a \n" item a b)
    (when (non-empty-string? item)
      (cond [(string-numeric? item)
             "number"]
            [(member item  '("(" ")" "+" "-" "*" "/"))
             item]
            [(char=? a #\:)
             (if (char=? b #\=)
                 ":="
                 "error")]
            [(when (char-alphabetic? a)
               (let ([id_result (string-id? item)])
                 (cond [(eqv? id_result "read")
                        "read"]
                       [(eqv? id_result "write")
                        "write"]
                       [else
                        (begin (set! input_list (append (list(substring item (string-length id_result))) input_list))
                               (writeln input_list)
                               ;(string-trim item id_result #:right? #f)
                               "id")]
                       ;this one is really weird 
                       )))]
            ))))

(define (r-token input_list result_list)
  (if (null? input_list)
      (begin
        (writeln "start1")
        (printf "results: ~a \n" result_list)
        result_list
      )
      (begin
        (if (non-empty-string? (first input_list))
            (begin
              (writeln "start2")
              (let ([item (first input_list)])
                (let([ a (string-ref item 0)])
        
                  (printf "item ~a   \n" item )
  
                  ;(when (non-empty-string? item)
                  (cond [(member item  '("(" ")" "+" "-" "*" "/"))
                         (begin (printf "Symbols! results ~a" (cons item result_list))
                                (r-token (rest input_list) (cons item result_list)))
                         ]
                        [(member a '(#\( #\) #\+ #\- #\* #\/))
                         (writeln "special symbol")
                         (r-token (cons (substring item 1) (rest input_list)) (cons (substring item 0 1) result_list))]
                        [(string-numeric? item)
                         (printf "num! results ~a" (cons "number" result_list))
                         (r-token (rest input_list) (cons "number" result_list))
                         ;(printf "results: ~a \n" result_list)
                         ]
                        [(char=? a #\:)
                         (begin (let([ b (string-ref item 1)])
                                  (if (char=? b #\=)
                                      (r-token (cons (substring item 2) (rest input_list)) (cons ":=" result_list))
                                      "error")))]
                        [(char-numeric? a)
                         (let ([num_result (get-num item "")])
                         ;get number and leave symbol agagaggaga (but don't accept number then letter)
                         (r-token (cons (substring item (string-length num_result)) (rest input_list)) (cons "number" result_list))
                         )]
                        [(when (char-alphabetic? a)
                           (let ([id_result (string-id? item)])
                             (cond [(eqv? id_result "read")
                                    (r-token (rest input_list) (cons "read" result_list))]
                                   [(eqv? id_result "write")
                                    (r-token (rest input_list) (cons "write" result_list))]
                                   [else
                                    (begin ;(append (string->list(substring item 0 (string-length id_result))) input_list)
                                      ;(writeln input_list)
                                      ;(string-trim item id_result #:right? #f)
                                      ;(writeln (substring item (string-length id_result)))
                                      (printf "returning ~a \n" (cons "id" result_list))
                                      (r-token (cons (substring item (string-length id_result)) (rest input_list)) (cons "id" result_list)) ; why is this returning void 
                                      ;(printf "results: ~a \n" result_list)
                                      )]
                                   )))]))))
          (r-token (rest input_list) result_list))
        )))

;need to catch symbols on tokens agggggggggg 
        
                   


;(writeln (string-id? "read"))
;(writeln (strip "abcdef" "abc"))
;(writeln (get-token-list '("abc2+acvd")))

(writeln (r-token '("a" ":=234a" "(abc+23)" "2") '()))
;(writeln (get-num "234" ""))
  
  